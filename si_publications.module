<?php

/**
 * @file
 * Establishes the basic ingredients of the si_publications module
 */

/**
 * Implements hook_permission().
 */
function si_publications_permission() {
  return array(
    'Administer SI libararies publications import' => array(
      'title' => t('Administer SI libararies publications import'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function si_publications_help($path, $arg) {
  switch ($path) {
    case 'admin/content/publications/settings':
      $h = t("<p>Configure your SI Publications module settings.</p>");
      return $h;
      break;
  }
}

/**
 * Implements hook_menu().
 */
function si_publications_menu() {
  $items = array();

  $items['admin/content/publications'] = array(
    'title' => 'Publications import',
    'description' => 'Import publications from SI Libraries',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('si_publications_import_form'),
    'file' => 'includes/si_publications.forms.inc',
    'access arguments' => array('Administer SI libararies publications import'),
  );

   $items['admin/content/publications/import'] = array(
    'title' => 'Publications import',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/content/publications/settings'] = array(
    'title' => 'Publications import settings',
    'description' => 'Settings for the Zoo publications module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('si_publications_settings_form'),
    'file' => 'includes/si_publications.forms.inc',
    'access arguments' => array('Administer SI libararies publications import'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/all-papers'] = array(
    // 'title' => t('All papers for @scientist'),
    'title callback' => 'get_all_papers_title',
    'title arguments' => array(1),
    'description' => 'All papers description',
    'page callback' => 'si_publications_get_all_papers',
    'page arguments' => array(1),
    'file' => 'includes/si_publications.controller.inc',
    'access callback' => TRUE
  );

  $items['user/%node/all-papers'] = array(
    // 'title' => t('All papers for @scientist'),
    'title callback' => 'get_all_papers_title',
    'title arguments' => array(1),
    'description' => 'All papers description',
    'page callback' => 'si_publications_get_all_papers',
    'page arguments' => array(1),
    'file' => 'includes/si_publications.controller.inc',
    'access callback' => TRUE
  );

  return $items;
}

/**
 * Generates title for "all papers" page
 *
 */
function get_all_papers_title($node) {
  $scientist_ct = variable_get('si_publications_scientist_ct');
  if ($scientist_ct == 'users') {
    return t('All papers for @scientist' , array('@scientist' => $node->name));
  }
  else {
    return t('All papers for @scientist' , array('@scientist' => $node->title));
  }

  // Zoo specific code
  ////add period to middle initial if any
  // $name_array = explode('-', $nid);
  // if ( count($name_array) == 3 && strlen($name_array[1]) == 1 )
  // {
  //   $name_array[1] .= '.';
  // }
  // $nid = implode(' ', $name_array);
  // $nid = ucwords($nid);
  // return t('All papers for @scientist' , array('@scientist' => $scientist));
}

/**
 * Implements hook_cron().
 *
 * hook_cron() is the traditional (pre-Drupal 7) hook for doing "background"
 * processing. It gets called every time the Drupal cron runs and must decide
 * what it will do.
 *
 * For this module, we add the list of scientist node IDs that have SI profiles IDs, but only if the queue is empty. We want all scientists to be processed before we add new ones.
 */
function si_publications_cron() {
   $queue = DrupalQueue::get('si_publications');
   $queue_length = $queue->numberOfItems();
   if (variable_get('si_publications_cron_switch') == 1 && $queue_length == 0) {
      module_load_include('inc', 'si_publications', 'includes/si_publications.controller');
      // load list of scientists with si profiles IDs
      $nids = si_publications_load_scientists();
      // Put everything in a queue for processing.
      foreach($nids as $nid) {
        $queue->createItem($nid);
      }
   }
 }

function si_publications_cron_queue_info() {
  $queues['si_publications'] = array(
    'worker callback' => 'si_publications_cron_worker',
    // max runtime per cron run.
    'time' => 10,
  );
  return $queues;
}

function si_publications_cron_worker($nid) {
  // load the scientist node
  $node = node_load($nid);
  module_load_include('inc', 'si_publications', 'includes/si_publications.controller');
  si_publications_fetch($node);
}

/**
 * Implements hook_node_view().
 *
 * Adds a link to "all publications" below each scientists "recent papers" field.
 */
function si_publications_node_view($node) {
  // get scientist content type
  $scientist_ct = variable_get('si_publications_scientist_ct');

  // check that current node is a scientist
  if ($node->type == $scientist_ct) {
    //get profiles id field and recent papers field
    $si_profile_field = variable_get('si_publications_si_profile_field');
    $recent_papers_field = variable_get('si_publications_recent_papers_field');

    //we only want to add all papers link on scientists that both have a si profiles ID and some recent papers
    if (!empty($node->$si_profile_field) && !empty($node->{$recent_papers_field}) ) {
      $link_to_papers = '/' . current_path() . '/all-papers';
      $node->content[$recent_papers_field]['#suffix'] = '<div><a href="' . $link_to_papers . '">All Papers</a></div>';

      // If altmetric is enabled, add it.
      add_altmetric();
    }
  }
}

/**
 * Implements hook_user_view().
 *
 * Adds a link to "all publications" below each scientists "recent papers" field.
 */
function si_publications_user_view($node) {
  // get scientist content type
  $scientist_ct = variable_get('si_publications_scientist_ct');

  // check that current node is a scientist
  if ($scientist_ct == 'users') {
    //get profiles id field and recent papers field
    $si_profile_field = variable_get('si_publications_si_profile_field');
    $recent_papers_field = variable_get('si_publications_recent_papers_field');

    //we only want to add all papers link on scientists that both have a si profiles ID and some recent papers
    if (!empty($node->$si_profile_field) && !empty($node->{$recent_papers_field}) ) {
      $link_to_papers = '/' . current_path() . '/all-papers';
      $node->content[$recent_papers_field]['#suffix'] = '<div><a href="' . $link_to_papers . '">All Papers</a></div>';

      // If altmetric is enabled, add it.
      add_altmetric();
    }
  }
}


// Checks to see whether the 'add altmetric' option is checked and if so, adds necessary code and styling then returns TRUE
function add_altmetric() {
  // create static variable for performance reasons
  $altmetric_set = &drupal_static('altmetric_set');
  if (!isset($altmetric_set)) {
    $altmetric_set = variable_get('si_publications_altmetric_switch');
  }

  if ($altmetric_set) {
     //add altmetric external js file
    drupal_add_js('https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js', array(
      'scope' => 'header',
      'type' => 'external',
      'every_page' => FALSE,
    ));
    // Add styling to
    drupal_add_css(
      '
      .altmetricIcon {
        float:right;
      }

      .altmetricIcon img {
        float: right;
        margin-left: 25px !important;
      }
      '
      , 'inline'
    );
    return TRUE;
  }
  else {
    drupal_add_css(
      '
      .altmetricIcon {
        display:none;
      }
      '
      , 'inline'
    );
    return FALSE;
  }
}
